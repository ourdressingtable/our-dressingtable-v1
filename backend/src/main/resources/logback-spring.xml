<?xml version="1.0" encoding="UTF-8" ?>
<!-- 60초마다 설정 파일의 변경 확인하고 변경 시 갱신-->
<configuration scan="true" scanPeriod="60 seconds">
  <!-- 로그 패턴에 색상 적용 %clr(pattern){color} https://logback.qos.ch/manual/layouts.html#coloring -->
  <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
  <springProfile name="local">
    <property name="LOG_PATH" value="logs/ourdressingtable-local"/>
  </springProfile>
  <springProfile name="dev">
    <property name="LOG_PATH" value="logs/ourdressingtable-dev"/>
  </springProfile>
  <springProfile name="prod">
    <property name="LOG_PATH" value="logs/ourdressingtable-prod"/>
  </springProfile>

  <!-- Environment 내의 properties 개별 설정-->
  <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root" defaultValue="INFO"/>

  <!-- log file name -->
  <property name="LOG_FILE_NAME" value="log"/>
  <!-- err log file name -->
  <property name="ERR_LOG_FILE_NAME" value="err_log"/>
  <!-- console log pattern-->
  <property name="CONSOLE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"/>
  <!-- file log pattern -->
  <property name="FILE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %-40.40logger{36} : %msg%n"/>
  <!-- Console Appender -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
    </encoder>
  </appender>
  <!-- File Appender -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
  <!-- 파일경로 설정 -->
  <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
  <!-- 출력패턴 설정 -->
  <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
    <pattern>${FILE_LOG_PATTERN}</pattern>
  </encoder>
  <!-- Rolling 정책 -->
  <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
  <!-- .gz .zip 등을 넣으면 자동 일자별 로그 파일 압축 -->
  <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log.zip</fileNamePattern>
  <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
    <!-- 파일당 최고 용량 kb, mb, gb -->
    <maxFileSize>10KB</maxFileSize>
  </timeBasedFileNamingAndTriggeringPolicy>
  <!-- 일자별 로그 파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
  <maxHistory>60</maxHistory>
    <totalSizeCap>1GB</totalSizeCap>
  </rollingPolicy>
  </appender>
  <!-- 에러의 경우 파일에 로그 처리 -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
  <filter class="ch.qos.logback.classic.filter.LevelFilter">
    <level>error</level>
    <onMatch>ACCEPT</onMatch>
    <onMismatch>DENY</onMismatch>
  </filter>
  <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
  <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
    <pattern>${FILE_LOG_PATTERN}</pattern>
  </encoder>
    <!-- Rolling 정책 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- .gz .zip 등을 넣으면 자동 일자별 로그파일 압축 -->
      <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최고 용량 kb, mb, gb -->
        <maxFileSize>10KB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그 파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
      <maxHistory>60</maxHistory>
    </rollingPolicy>
  </appender>
  <!-- Autoconfigure 관련 로그 레벨 설정-->
  <logger name="org.springframework.boot.autoconfigure" level="ERROR" />
  <!-- root 레벨 설정 -->
  <root level="${LOG_LEVEL}">
    <appender-ref ref="CONSOLE"/>
    <appender-ref ref="FILE"/>
    <appender-ref ref="ERROR"/>
  </root>
</configuration>